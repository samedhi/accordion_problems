// Auto-generated from accordion.html.
// DO NOT EDIT.

library x_accordion;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:widget/effects.dart';
import 'package:widget/widget.dart';
import 'package:bot/bot.dart';



/**
 * [Accordion] wraps a set of [Collapse] elements and ensures only one is visible
 * at a time.
 *
 * See [Collapse] for details on how content is interpreted.
 */
class Accordion extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <content select="x-collapse"></content>
      ''');
  autogenerated.Template __t;

  Accordion.forElement(e) : super.forElement(e);

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.nodes.add(__shadowTemplate.clone(true));
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  @protected
  void created() {
    ShowHideComponent.toggleEvent.forTarget(this).listen(_onOpen);
  }

  @protected
  void inserted() {
    // collapse all 'collapse' children
    _getAllCollapseElements()
      .map((Element e) => e.xtag)
      .forEach((ShowHideComponent e) {
        e.hide();
      });
  }

  List<Element> _getAllCollapseElements() => this.queryAll('x-accordion > x-collapse');

  void _onOpen(Event openEvent) {
    if(openEvent.target is UnknownElement) {
      final UnknownElement target = openEvent.target;
      final ShowHideComponent shc = target.xtag as ShowHideComponent;
      if(shc != null) {
        _onShowHideToggle(shc);
      }
    }
  }

  void _onShowHideToggle(ShowHideComponent shc) {
    if(shc.isShown) {
      _getAllCollapseElements()
        .map((Element e) => e.xtag)
        .where((e) => e != shc)
        .forEach((ShowHideComponent e) {
          e.hide();
        });
    }
  }
}

//@ sourceMappingURL=accordion.dart.map